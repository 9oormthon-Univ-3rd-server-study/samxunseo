# 매인 브랜치에 push가 발생하면, 아래 워크플로우를 실행
name: Deploy to AWS EC2
on:
  push:
    branches: ["main"]

# 푸시 이밴트 발생 시, 수행하는 작업
jobs:
  build:
    name: Build and Push Docker Image # 도커 이미지 생성 후 푸시
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - uses: actions/checkout@v3

      # 자바 버전 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # 야물파일 환경변수 주입(Oauth - kakao)
      - name: Set up yml file
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application.yml
        env:
          oauth.kakao.client_id : ${{secrets.KAKAO_CLIENT_ID}}
          oauth.kakao.redirect_uri : ${{secrets.KAKAO_REDIRECT_URI}}
          oauth.kakao.client_secret : ${{secrets.KAKAO_CLIENT_SECRET}}

      # Gradle build 실행(테스트 제외)
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean build -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      # Docker 이미지 빌드
      - name: Build Docker Image
        run: docker build -t ${{secrets.DOCKERHUB_USERNAME}}/server:latest .

      # Docker Hub에 이미지 푸시
      - name: Push Docker image to Docker hub
        run: docker push ${{secrets.DOCKERHUB_USERNAME}}/server:latest

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.EC2_HOST}}
          username: ${{secrets.EC2_USER}}
          key: ${{secrets.EC2_KEY}}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo usermod -aG docker $USER
            newgrp docker
            
             # 새 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/server:latest
            
            # 기존 컨테이너 확인 및 제거
            if [ "$(docker ps -aq -f name=server)" ]
            then
             echo "[ spring is running ]"
             docker stop server
             docker rm server
            else
             echo "[ spring is not running ]"
            fi
            
            # 새 컨테이너 실행 (80:8080 포트 매핑)
            docker run -d --name server -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/server
